# Generated from Eson.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,179,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,4,6,53,8,6,11,6,12,
        6,54,1,7,4,7,58,8,7,11,7,12,7,59,1,7,1,7,4,7,64,8,7,11,7,12,7,65,
        1,7,1,7,3,7,70,8,7,1,7,4,7,73,8,7,11,7,12,7,74,3,7,77,8,7,1,8,1,
        8,1,8,1,8,1,9,1,9,5,9,85,8,9,10,9,12,9,88,9,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,4,11,111,8,11,11,11,12,11,112,3,11,115,8,11,
        1,12,1,12,1,12,1,12,1,13,4,13,122,8,13,11,13,12,13,123,1,13,1,13,
        4,13,128,8,13,11,13,12,13,129,3,13,132,8,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,3,13,141,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,3,14,152,8,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,5,16,
        161,8,16,10,16,12,16,164,9,16,1,17,4,17,167,8,17,11,17,12,17,168,
        1,17,1,17,1,18,1,18,5,18,175,8,18,10,18,12,18,178,9,18,0,0,19,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,1,0,10,1,0,48,57,2,0,69,69,101,
        101,2,0,43,43,45,45,2,0,39,39,92,92,1,0,34,34,3,0,104,104,109,109,
        115,115,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,
        9,10,13,13,32,32,2,0,10,10,13,13,197,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,45,1,
        0,0,0,9,47,1,0,0,0,11,49,1,0,0,0,13,52,1,0,0,0,15,57,1,0,0,0,17,
        78,1,0,0,0,19,82,1,0,0,0,21,91,1,0,0,0,23,100,1,0,0,0,25,116,1,0,
        0,0,27,121,1,0,0,0,29,151,1,0,0,0,31,153,1,0,0,0,33,158,1,0,0,0,
        35,166,1,0,0,0,37,172,1,0,0,0,39,40,5,91,0,0,40,2,1,0,0,0,41,42,
        5,44,0,0,42,4,1,0,0,0,43,44,5,93,0,0,44,6,1,0,0,0,45,46,5,123,0,
        0,46,8,1,0,0,0,47,48,5,125,0,0,48,10,1,0,0,0,49,50,5,61,0,0,50,12,
        1,0,0,0,51,53,7,0,0,0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,
        54,55,1,0,0,0,55,14,1,0,0,0,56,58,7,0,0,0,57,56,1,0,0,0,58,59,1,
        0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,63,5,46,0,0,62,
        64,7,0,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,
        0,66,76,1,0,0,0,67,69,7,1,0,0,68,70,7,2,0,0,69,68,1,0,0,0,69,70,
        1,0,0,0,70,72,1,0,0,0,71,73,7,0,0,0,72,71,1,0,0,0,73,74,1,0,0,0,
        74,72,1,0,0,0,74,75,1,0,0,0,75,77,1,0,0,0,76,67,1,0,0,0,76,77,1,
        0,0,0,77,16,1,0,0,0,78,79,5,39,0,0,79,80,8,3,0,0,80,81,5,39,0,0,
        81,18,1,0,0,0,82,86,5,34,0,0,83,85,8,4,0,0,84,83,1,0,0,0,85,88,1,
        0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,
        90,5,34,0,0,90,20,1,0,0,0,91,92,7,0,0,0,92,93,6,10,0,0,93,94,5,45,
        0,0,94,95,7,0,0,0,95,96,6,10,1,0,96,97,5,45,0,0,97,98,7,0,0,0,98,
        99,6,10,2,0,99,22,1,0,0,0,100,101,7,0,0,0,101,102,6,11,3,0,102,103,
        5,58,0,0,103,104,7,0,0,0,104,105,6,11,4,0,105,106,5,58,0,0,106,107,
        7,0,0,0,107,114,6,11,5,0,108,110,5,46,0,0,109,111,7,0,0,0,110,109,
        1,0,0,0,111,112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,
        1,0,0,0,114,108,1,0,0,0,114,115,1,0,0,0,115,24,1,0,0,0,116,117,3,
        21,10,0,117,118,5,84,0,0,118,119,3,23,11,0,119,26,1,0,0,0,120,122,
        7,0,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,
        1,0,0,0,124,131,1,0,0,0,125,127,5,46,0,0,126,128,7,0,0,0,127,126,
        1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,132,
        1,0,0,0,131,125,1,0,0,0,131,132,1,0,0,0,132,140,1,0,0,0,133,134,
        5,110,0,0,134,141,5,115,0,0,135,136,5,117,0,0,136,141,5,115,0,0,
        137,138,5,109,0,0,138,141,5,115,0,0,139,141,7,5,0,0,140,133,1,0,
        0,0,140,135,1,0,0,0,140,137,1,0,0,0,140,139,1,0,0,0,141,28,1,0,0,
        0,142,143,5,116,0,0,143,144,5,114,0,0,144,145,5,117,0,0,145,152,
        5,101,0,0,146,147,5,102,0,0,147,148,5,97,0,0,148,149,5,108,0,0,149,
        150,5,115,0,0,150,152,5,101,0,0,151,142,1,0,0,0,151,146,1,0,0,0,
        152,30,1,0,0,0,153,154,5,110,0,0,154,155,5,117,0,0,155,156,5,108,
        0,0,156,157,5,108,0,0,157,32,1,0,0,0,158,162,7,6,0,0,159,161,7,7,
        0,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,
        0,0,163,34,1,0,0,0,164,162,1,0,0,0,165,167,7,8,0,0,166,165,1,0,0,
        0,167,168,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,
        0,170,171,6,17,6,0,171,36,1,0,0,0,172,176,5,35,0,0,173,175,8,9,0,
        0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,
        0,177,38,1,0,0,0,178,176,1,0,0,0,18,0,54,59,65,69,74,76,86,112,114,
        123,129,131,140,151,162,168,176,7,1,10,0,1,10,1,1,10,2,1,11,3,1,
        11,4,1,11,5,6,0,0
    ]

class EsonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    INTEGER = 7
    FLOAT = 8
    CHAR = 9
    STRING = 10
    DATE = 11
    TIME = 12
    DATETIME = 13
    DURATION = 14
    BOOL = 15
    NULL = 16
    SYMBOL = 17
    WS = 18
    COMMENT = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "','", "']'", "'{'", "'}'", "'='", "'null'" ]

    symbolicNames = [ "<INVALID>",
            "INTEGER", "FLOAT", "CHAR", "STRING", "DATE", "TIME", "DATETIME", 
            "DURATION", "BOOL", "NULL", "SYMBOL", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "INTEGER", 
                  "FLOAT", "CHAR", "STRING", "DATE", "TIME", "DATETIME", 
                  "DURATION", "BOOL", "NULL", "SYMBOL", "WS", "COMMENT" ]

    grammarFileName = "Eson.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[10] = self.DATE_action 
            actions[11] = self.TIME_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def DATE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            4
     

        if actionIndex == 1:
            2
     

        if actionIndex == 2:
            2
     

    def TIME_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            2
     

        if actionIndex == 4:
            2
     

        if actionIndex == 5:
            2
     


